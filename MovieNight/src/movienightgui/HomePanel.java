/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package movienightgui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author deneg
 */
public class HomePanel extends javax.swing.JPanel {
    
    private String loggedUser;
    private ArrayList<String> users = new ArrayList<>();
    private DefaultListModel<String> usersModel = new DefaultListModel<>();
    private HashMap<String, Boolean> usersAndInvitations = new HashMap<>();
    private IDatabase db;
    
    private String selectedUser = "";
    private ArrayList<String> invitedUsers = new ArrayList<>();
    
    private Boolean searchEmpty = true;
    
    private ArrayList<String> invitations = new ArrayList<>();
    private DefaultListModel<String> invitationsModel = new DefaultListModel<>();
    private String acceptedInvitation;
    private int numOfInvited = 0;
    
    private Boolean isCreatingNewLobby = false;
    
    private SharedUserModel sharedUserModel;
    private JFrame parentFrame;
    
    public void loginAs(String username) {
        loggedUserLabel.setText(username);
        this.loggedUser = username;
        selectedUser = loggedUser;
        selectedUserLabel.setText(loggedUser);
        userInviteCancelButton.setEnabled(false);
    }
    
    /**
     * Creates new form HomePanel
     *
     * @param loggedUser
     * @param db
     */
    public HomePanel(IDatabase db, SharedUserModel sharedUserModel, JFrame parentFrame) {
        initComponents();
        this.db = db;
        this.sharedUserModel = sharedUserModel;
        this.parentFrame = parentFrame;
    }
    
    public void init() {
        initSearch();

        loginAs(sharedUserModel.getUsername());
        loadUsers();
        loadInvitations();

        for (String user : users) {
            usersAndInvitations.put(user, false);
        }
    }
    
    private void initSearch() {
        searchUserField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                search(searchUserField.getText());
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                search(searchUserField.getText());
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                search(searchUserField.getText());
            }
        });
        refreshSearch();
    }
    
    private void refreshSearch() {
        searchEmpty = true;
        searchUserField.setText("Search user...");
        searchUserField.setForeground(Color.GRAY);
    }
    
    private void search(String input) {
        usersModel.removeAllElements();
        usersModel.addAll(users);
        for (String user : users) {
            if (!user.contains(input)) {
                usersModel.removeElement(user);
            }
        }
    }
    
    private void loadUsers() {
        users = db.getUsers();
        usersModel.removeAllElements();
        usersModel.addAll(users); 
        usersList.setModel(usersModel);
    }
    
    private void loadInvitations() {
       invitations = db.getInvitiationsForUser(loggedUser);
       invitationsModel.removeAllElements();
       invitationsModel.addAll(invitations);
       invitationsList.setModel(invitationsModel);
    }
    
    private void displayInvitations() {
        loadInvitations();
        invitationAcceptButton.setText("Accept");
    }
    
    private void displayLobbyCreate() {
        isCreatingNewLobby = true;
        invitationsModel.removeAllElements();
        invitationsModel.addElement(loggedUser);      
        invitationAcceptButton.setText("Create Lobby");
    }
    
    private void showLobby() {
        CardLayout cl = (CardLayout) parentFrame.getContentPane().getLayout();
        cl.show(parentFrame.getContentPane(), "lobby");
        for (Component component : parentFrame.getContentPane().getComponents()) {
            if (component instanceof LobbyPanel lobbyPanel) {
                lobbyPanel.init();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        invitationsPanel = new javax.swing.JPanel();
        invitationsScroll = new javax.swing.JScrollPane();
        invitationsList = new javax.swing.JList<>();
        invitationAcceptButton = new javax.swing.JButton();
        usersPanel = new javax.swing.JPanel();
        usersScroll = new javax.swing.JScrollPane();
        usersList = new javax.swing.JList<>();
        userInviteCancelButton = new javax.swing.JButton();
        selectedUserLabel = new javax.swing.JLabel();
        searchUserField = new javax.swing.JTextField();
        loggedUserPanel = new javax.swing.JPanel();
        loggedUserLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();

        invitationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invitations", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Black", 0, 12))); // NOI18N

        invitationsList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        invitationsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invitationsListMouseClicked(evt);
            }
        });
        invitationsScroll.setViewportView(invitationsList);

        invitationAcceptButton.setText("Accept");
        invitationAcceptButton.setEnabled(false);
        invitationAcceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invitationAcceptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout invitationsPanelLayout = new javax.swing.GroupLayout(invitationsPanel);
        invitationsPanel.setLayout(invitationsPanelLayout);
        invitationsPanelLayout.setHorizontalGroup(
            invitationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invitationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(invitationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invitationsScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(invitationAcceptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        invitationsPanelLayout.setVerticalGroup(
            invitationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(invitationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invitationsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invitationAcceptButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        usersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "List of Users", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Black", 0, 12))); // NOI18N

        usersList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        usersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersListMouseClicked(evt);
            }
        });
        usersScroll.setViewportView(usersList);

        userInviteCancelButton.setText("Invite");
        userInviteCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userInviteCancelButtonActionPerformed(evt);
            }
        });

        selectedUserLabel.setText("Username");

        searchUserField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchUserFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchUserFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout usersPanelLayout = new javax.swing.GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usersScroll)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersPanelLayout.createSequentialGroup()
                        .addComponent(selectedUserLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userInviteCancelButton))
                    .addComponent(searchUserField, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))
                .addContainerGap())
        );
        usersPanelLayout.setVerticalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addComponent(searchUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usersScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectedUserLabel)
                    .addComponent(userInviteCancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        loggedUserPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Logged in as", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Black", 0, 12))); // NOI18N

        loggedUserLabel.setText("Logged-in username");

        javax.swing.GroupLayout loggedUserPanelLayout = new javax.swing.GroupLayout(loggedUserPanel);
        loggedUserPanel.setLayout(loggedUserPanelLayout);
        loggedUserPanelLayout.setHorizontalGroup(
            loggedUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loggedUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loggedUserLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addGap(84, 84, 84))
        );
        loggedUserPanelLayout.setVerticalGroup(
            loggedUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loggedUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loggedUserLabel)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(invitationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(loggedUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(usersPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(invitationsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(loggedUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void invitationsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invitationsListMouseClicked
        // TODO add your handling code here:
        if (invitationsList.getSelectedValue() != null && acceptedInvitation == null) {
            invitationAcceptButton.setEnabled(true);
        }
    }//GEN-LAST:event_invitationsListMouseClicked

    private void invitationAcceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invitationAcceptButtonActionPerformed
        // TODO add your handling code here:
        if (invitationsList.getSelectedValue() != null) {
            acceptedInvitation = invitationsList.getSelectedValue();
            invitationAcceptButton.setEnabled(false);
            
            if (numOfInvited == 0) {
                System.out.println("Accepted Invitation of " + acceptedInvitation);
                sharedUserModel.setLobby(acceptedInvitation);
            } else {
                System.out.println("Creating a new lobby...");
                sharedUserModel.setLobby(loggedUser);
            }
            db.addUserToLobby(sharedUserModel.getLobby(), loggedUser);
            showLobby();
        }
    }//GEN-LAST:event_invitationAcceptButtonActionPerformed

    private void usersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersListMouseClicked
        // TODO add your handling code here:
        if (usersList.getSelectedValue() != null) {
            selectedUser = usersList.getSelectedValue();
        }
        selectedUserLabel.setText(selectedUser);

        if (selectedUser.equals(loggedUser)) {
            userInviteCancelButton.setEnabled(false);
        } else {
            userInviteCancelButton.setEnabled(true);
        }

        if (!usersAndInvitations.get(selectedUser)) {
            userInviteCancelButton.setText("Invite");
        } else {
            userInviteCancelButton.setText("Cancel");
        }
        System.out.println(selectedUser);
    }//GEN-LAST:event_usersListMouseClicked

    private void userInviteCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userInviteCancelButtonActionPerformed
        // TODO add your handling code here:
        usersAndInvitations.put(selectedUser, !usersAndInvitations.get(selectedUser));
        
        if (!usersAndInvitations.get(selectedUser)) {
            numOfInvited -= 1;
            userInviteCancelButton.setText("Invite");
            db.removeInvitationFromUser(selectedUser, loggedUser);
            
            // If no other user is invited, show invitations again.
            if (numOfInvited == 0) {
                displayInvitations();
            }
        } else {
            numOfInvited += 1;
            userInviteCancelButton.setText("Cancel");
            db.sendInvitationToUser(loggedUser, selectedUser);
            
            // If invited any user, stop displaying other invitations and only
            // display created lobby invitation.            
            if (numOfInvited >= 1) {
                displayLobbyCreate();
            }
        }
        System.out.println(selectedUser + db.getInvitiationsForUser(selectedUser));
    }//GEN-LAST:event_userInviteCancelButtonActionPerformed

    private void searchUserFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchUserFieldFocusGained
        // TODO add your handling code here:
        if (searchEmpty) {
            searchUserField.setText("");
            searchUserField.setForeground(Color.BLACK);
            search("");
        }
    }//GEN-LAST:event_searchUserFieldFocusGained

    private void searchUserFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchUserFieldFocusLost
        // TODO add your handling code here:
        if (searchUserField.getText().equals("")) {
            searchEmpty = true;
            searchUserField.setText("Search user...");
            searchUserField.setForeground(Color.GRAY);
            search("");
        }
    }//GEN-LAST:event_searchUserFieldFocusLost

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refreshSearch();
        loadUsers();
        loadInvitations();
        if (numOfInvited >= 1) {
            displayLobbyCreate();
        } else {
            displayInvitations();
        }
    }//GEN-LAST:event_refreshButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton invitationAcceptButton;
    private javax.swing.JList<String> invitationsList;
    private javax.swing.JPanel invitationsPanel;
    private javax.swing.JScrollPane invitationsScroll;
    private javax.swing.JLabel loggedUserLabel;
    private javax.swing.JPanel loggedUserPanel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField searchUserField;
    private javax.swing.JLabel selectedUserLabel;
    private javax.swing.JButton userInviteCancelButton;
    private javax.swing.JList<String> usersList;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JScrollPane usersScroll;
    // End of variables declaration//GEN-END:variables
}
